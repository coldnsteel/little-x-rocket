{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Service Worker for Little X and the Purple Rocket Ship\
// Enables offline functionality and PWA installation\
\
const CACHE_NAME = 'little-x-rocket-v1';\
const urlsToCache = [\
  '/',\
  '/index.html',\
  '/manifest.json'\
];\
\
// Install event - cache resources\
self.addEventListener('install', event => \{\
  console.log('Service Worker: Installing...');\
  event.waitUntil(\
    caches.open(CACHE_NAME)\
      .then(cache => \{\
        console.log('Service Worker: Caching files');\
        return cache.addAll(urlsToCache);\
      \})\
      .then(() => \{\
        console.log('Service Worker: All files cached');\
        return self.skipWaiting();\
      \})\
  );\
\});\
\
// Activate event - clean up old caches\
self.addEventListener('activate', event => \{\
  console.log('Service Worker: Activating...');\
  event.waitUntil(\
    caches.keys().then(cacheNames => \{\
      return Promise.all(\
        cacheNames.map(cacheName => \{\
          if (cacheName !== CACHE_NAME) \{\
            console.log('Service Worker: Deleting old cache:', cacheName);\
            return caches.delete(cacheName);\
          \}\
        \})\
      );\
    \}).then(() => \{\
      console.log('Service Worker: Activated');\
      return self.clients.claim();\
    \})\
  );\
\});\
\
// Fetch event - serve from cache, fallback to network\
self.addEventListener('fetch', event => \{\
  event.respondWith(\
    caches.match(event.request)\
      .then(response => \{\
        // Return cached version or fetch from network\
        if (response) \{\
          console.log('Service Worker: Serving from cache:', event.request.url);\
          return response;\
        \}\
        \
        console.log('Service Worker: Fetching from network:', event.request.url);\
        return fetch(event.request).then(response => \{\
          // Don't cache non-successful responses\
          if (!response || response.status !== 200 || response.type !== 'basic') \{\
            return response;\
          \}\
          \
          // Clone the response for caching\
          const responseToCache = response.clone();\
          caches.open(CACHE_NAME)\
            .then(cache => \{\
              cache.put(event.request, responseToCache);\
            \});\
            \
          return response;\
        \});\
      \})\
      .catch(() => \{\
        // Fallback for offline scenarios\
        if (event.request.destination === 'document') \{\
          return caches.match('/index.html');\
        \}\
      \})\
  );\
\});}